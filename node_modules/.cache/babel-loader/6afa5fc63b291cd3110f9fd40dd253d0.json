{"ast":null,"code":"var _jsxFileName = \"C:\\\\shared\\\\cmv2\\\\candymachine-v2-boiler-mint-site-noFLP\\\\src\\\\Minter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, getCandyMachineState, mintOneToken } from \"./candy-machine\";\nimport { MintButton } from \"./MintButton\";\nimport { getPhase, Phase, PhaseHeader } from \"./PhaseHeader\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { whitelistSettings, publicSaleSettings, welcomeSettings, MintWelcomeCustomHTML, MintWhitelistCustomHTML, MintPublicSaleCustomHTML } from \"./userSettings\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  position: absolute;\n  left: 0px;\n  bottom: -15px;\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n  transform: translate(0%, -50%);\n`;\n_c = ConnectButton;\nconst MintContainer = styled.div`\n  position: absolute;\n  width: 100%;\n  left: 0px;\n  bottom: 15px;\n`; // add your styles here\n\n_c2 = MintContainer;\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state$g;\n\n  // const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\n  const rpcUrl = props.rpcHost;\n  const [whiteListTokenBalance, setWhiteListTokenBalance] = useState(0);\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [mintingTotal, setMintingTotal] = useState(null);\n  const [itemsAvailable, setItemsAvailable] = useState(null);\n  const [publicKey, setPublicKey] = useState();\n  const [candyMachine, setCandyMachine] = useState();\n  const [price, setPrice] = useState(null);\n  const wallet = useWallet();\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n\n  const onMint = async () => {\n    try {\n      var _document$getElementB;\n\n      setIsMinting(true);\n      (_document$getElementB = document.getElementById(\"#identity\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && wallet.publicKey) {\n        var _status;\n\n        const mintTxId = (await mintOneToken(candyMachine, wallet.publicKey))[0];\n        let status = {\n          err: true\n        };\n\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, \"singleGossip\", true);\n        }\n\n        if (!((_status = status) !== null && _status !== void 0 && _status.err)) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\"\n          });\n          setMintingTotal(mintingTotal + 1);\n          if (whiteListTokenBalance && whiteListTokenBalance > 0) setWhiteListTokenBalance(whiteListTokenBalance - 1);\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n        }\n      }\n    } catch (error) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x138\")) {} else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      });\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (!anchorWallet) {\n        console.log(\"anchor wallet not found\");\n        return;\n      }\n\n      console.log(\"wallet connected\");\n\n      if (anchorWallet.publicKey) {\n        setPublicKey(anchorWallet.publicKey);\n      } // try {\n      //   const balance = await props.connection.getBalance(\n      //     anchorWallet.publicKey\n      //   );\n      //   console.log(\"Sol balance is: \" + balance);\n      //   setYourSOLBalance(balance);\n      // } catch (e) {\n      //   console.log(\"Problem getting fair launch state\");\n      //   console.log(e);\n      // }\n\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, props.connection);\n          await setCandyMachine(cndy);\n        } catch (e) {\n          console.log(\"Problem getting candy machine state\");\n          console.log(e);\n        }\n      } else {\n        console.log(\"No candy machine detected in configuration.\");\n      }\n    })();\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n  useEffect(() => {\n    async function getTokenAmount() {\n      var _candyMachine$state$w;\n\n      if (publicKey && candyMachine !== null && candyMachine !== void 0 && (_candyMachine$state$w = candyMachine.state.whitelistMintSettings) !== null && _candyMachine$state$w !== void 0 && _candyMachine$state$w.mint) {\n        try {\n          var _candyMachine$state$w2;\n\n          const tokenAmount = await props.connection.getParsedTokenAccountsByOwner(publicKey, {\n            mint: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state$w2 = candyMachine.state.whitelistMintSettings) === null || _candyMachine$state$w2 === void 0 ? void 0 : _candyMachine$state$w2.mint\n          });\n          return tokenAmount.value[0].account.data.parsed.info.tokenAmount.amount;\n        } catch {\n          return 0;\n        }\n      }\n    }\n\n    getTokenAmount().then(wlToken => {\n      var _candyMachine$state$w3;\n\n      setWhiteListTokenBalance(wlToken);\n\n      if (candyMachine !== null && candyMachine !== void 0 && (_candyMachine$state$w3 = candyMachine.state.whitelistMintSettings) !== null && _candyMachine$state$w3 !== void 0 && _candyMachine$state$w3.discountPrice && wlToken) {\n        var _candyMachine$state$w4;\n\n        setPrice((candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state$w4 = candyMachine.state.whitelistMintSettings) === null || _candyMachine$state$w4 === void 0 ? void 0 : _candyMachine$state$w4.discountPrice.toNumber()) / 1000000000);\n      } else if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.price) {\n        setPrice((candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.price.toNumber()) / 1000000000);\n      }\n    });\n\n    if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.itemsAvailable) {\n      setItemsAvailable(candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.itemsAvailable);\n    }\n\n    if ((candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.itemsRedeemed) == null) {\n      setMintingTotal(0);\n    } else {\n      setMintingTotal(candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.itemsRedeemed);\n    }\n  }, [candyMachine, publicKey, props.connection]);\n  const phase = getPhase(candyMachine);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      style: {\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          padding: \"34px 24px 90px 24px\",\n          display: \"flex\",\n          borderRadius: 6\n        },\n        className: \"minting-box\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"space-between\",\n          direction: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(PhaseHeader, {\n            phase: phase,\n            candyMachine: candyMachine,\n            rpcUrl: rpcUrl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [phase === Phase.Welcome && welcomeSettings.enableCustomHTML && /*#__PURE__*/_jsxDEV(MintWelcomeCustomHTML, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this), phase === Phase.WhiteListMint && whitelistSettings.enableCustomHTML && /*#__PURE__*/_jsxDEV(MintWhitelistCustomHTML, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this), phase === Phase.PublicMint && publicSaleSettings.enableCustomHTML && /*#__PURE__*/_jsxDEV(MintPublicSaleCustomHTML, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 19\n            }, this), (phase === Phase.PublicMint || Phase.WhiteListMint) && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [phase === Phase.WhiteListMint && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card minting-info text-center\",\n                children: [whiteListTokenBalance >= 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: whiteListTokenBalance\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"loading\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Mints to Claim\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 301,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                justifyContent: \"space-between\",\n                color: \"textSecondary\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"test-stat\",\n                  children: (phase === Phase.WhiteListMint || phase === Phase.PublicMint) && (itemsAvailable !== null && mintingTotal !== null ? /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: mintingTotal + \" / \" + itemsAvailable\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"loading\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-end\",\n                  children: phase === Phase.Welcome && welcomeSettings.showPrice || phase === Phase.WhiteListMint || phase === Phase.PublicMint ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: price ? /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [price, \" Sol\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 327,\n                      columnNumber: 29\n                    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"loading\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 329,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false) : \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 19\n              }, this), !wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n                children: [\"Connect\", \"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(MintContainer, {\n                children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n                  wallet: {\n                    publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                    //@ts-ignore\n                    signTransaction: wallet.signTransaction\n                  } // // Replace with following when added\n                  // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                  ,\n                  gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state = candyMachine.state) === null || _candyMachine$state === void 0 ? void 0 : (_candyMachine$state$g = _candyMachine$state.gatekeeper) === null || _candyMachine$state$g === void 0 ? void 0 : _candyMachine$state$g.gatekeeperNetwork // This is the ignite (captcha) network\n                  /// Don't need this for mainnet\n                  ,\n                  clusterUrl: rpcUrl,\n                  options: {\n                    autoShowModal: false\n                  },\n                  children: /*#__PURE__*/_jsxDEV(MintButton, {\n                    candyMachine: candyMachine,\n                    isMinting: isMinting,\n                    onMint: onMint\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 365,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n                  candyMachine: candyMachine,\n                  isMinting: isMinting,\n                  onMint: onMint\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: 6000,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"5uVulVYj9ihJNSFjea6cPU0PoFA=\", false, function () {\n  return [useWallet];\n});\n\n_c3 = Home;\nexport default Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"sources":["C:/shared/cmv2/candymachine-v2-boiler-mint-site-noFLP/src/Minter.tsx"],"names":["useEffect","useMemo","useState","styled","Container","Snackbar","Paper","Grid","Alert","PublicKey","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","getCandyMachineState","mintOneToken","MintButton","getPhase","Phase","PhaseHeader","GatewayProvider","whitelistSettings","publicSaleSettings","welcomeSettings","MintWelcomeCustomHTML","MintWhitelistCustomHTML","MintPublicSaleCustomHTML","ConnectButton","MintContainer","div","Home","props","rpcUrl","rpcHost","whiteListTokenBalance","setWhiteListTokenBalance","isMinting","setIsMinting","mintingTotal","setMintingTotal","itemsAvailable","setItemsAvailable","publicKey","setPublicKey","candyMachine","setCandyMachine","price","setPrice","wallet","anchorWallet","signAllTransactions","signTransaction","alertState","setAlertState","open","message","severity","undefined","onMint","document","getElementById","click","connected","program","mintTxId","status","err","txTimeout","connection","error","msg","indexOf","code","window","location","reload","console","log","candyMachineId","cndy","e","getTokenAmount","state","whitelistMintSettings","mint","tokenAmount","getParsedTokenAccountsByOwner","value","account","data","parsed","info","amount","then","wlToken","discountPrice","toNumber","itemsRedeemed","phase","position","padding","display","borderRadius","Welcome","enableCustomHTML","WhiteListMint","PublicMint","showPrice","isActive","gatekeeper","gatekeeperNetwork","autoShowModal"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar } from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from \"./candy-machine\";\r\n\r\nimport { AlertState } from \"./utils\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { getPhase, Phase, PhaseHeader } from \"./PhaseHeader\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport {\r\n  whitelistSettings,\r\n  publicSaleSettings,\r\n  welcomeSettings,\r\n  MintWelcomeCustomHTML,\r\n  MintWhitelistCustomHTML,\r\n  MintPublicSaleCustomHTML,\r\n} from \"./userSettings\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  position: absolute;\r\n  left: 0px;\r\n  bottom: -15px;\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  transform: translate(0%, -50%);\r\n`;\r\n\r\nconst MintContainer = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  left: 0px;\r\n  bottom: 15px;\r\n`; // add your styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  // const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\r\n  const rpcUrl = props.rpcHost;\r\n  const [whiteListTokenBalance, setWhiteListTokenBalance] = useState<number>(0);\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [mintingTotal, setMintingTotal] = useState<number | null>(null);\r\n  const [itemsAvailable, setItemsAvailable] = useState<number | null>(null);\r\n  const [publicKey, setPublicKey] = useState<PublicKey>();\r\n\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n\r\n  const [price, setPrice] = useState<number | null>(null);\r\n\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      document.getElementById(\"#identity\")?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = (\r\n          await mintOneToken(candyMachine, wallet.publicKey)\r\n        )[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            \"singleGossip\",\r\n            true\r\n          );\r\n        }\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n\r\n          setMintingTotal(mintingTotal! + 1);\r\n\r\n          if (whiteListTokenBalance && whiteListTokenBalance > 0)\r\n            setWhiteListTokenBalance(whiteListTokenBalance - 1);\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction Timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!anchorWallet) {\r\n        console.log(\"anchor wallet not found\");\r\n        return;\r\n      }\r\n      console.log(\"wallet connected\");\r\n      if (anchorWallet.publicKey) {\r\n        setPublicKey(anchorWallet.publicKey)\r\n      }\r\n\r\n      // try {\r\n      //   const balance = await props.connection.getBalance(\r\n      //     anchorWallet.publicKey\r\n      //   );\r\n      //   console.log(\"Sol balance is: \" + balance);\r\n      //   setYourSOLBalance(balance);\r\n      // } catch (e) {\r\n      //   console.log(\"Problem getting fair launch state\");\r\n      //   console.log(e);\r\n      // }\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet,\r\n            props.candyMachineId,\r\n            props.connection\r\n          );\r\n          await setCandyMachine(cndy);\r\n        } catch (e) {\r\n          console.log(\"Problem getting candy machine state\");\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        console.log(\"No candy machine detected in configuration.\");\r\n      }\r\n    })();\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  useEffect(() => {\r\n    async function getTokenAmount() {\r\n      if (\r\n        publicKey &&\r\n        candyMachine?.state.whitelistMintSettings?.mint\r\n      ) {\r\n        try {\r\n          const tokenAmount =\r\n            await props.connection.getParsedTokenAccountsByOwner(\r\n              publicKey,\r\n              { mint: candyMachine?.state.whitelistMintSettings?.mint }\r\n            );\r\n\r\n          return tokenAmount.value[0].account.data.parsed.info.tokenAmount.amount\r\n        } catch {\r\n          return 0\r\n        }\r\n      }\r\n    }\r\n\r\n    getTokenAmount().then((wlToken) => {\r\n      setWhiteListTokenBalance(wlToken);\r\n      if (candyMachine?.state.whitelistMintSettings?.discountPrice && wlToken) {\r\n        setPrice(candyMachine?.state.whitelistMintSettings?.discountPrice.toNumber() / 1000000000);\r\n      } else if (candyMachine?.state.price) {\r\n        setPrice(candyMachine?.state.price.toNumber() / 1000000000);\r\n      }\r\n    })\r\n\r\n    if (candyMachine?.state.itemsAvailable) {\r\n      setItemsAvailable(candyMachine?.state.itemsAvailable);\r\n    }\r\n\r\n    if (candyMachine?.state.itemsRedeemed == null) {\r\n      setMintingTotal(0);\r\n    } else {\r\n      setMintingTotal(candyMachine?.state.itemsRedeemed);\r\n    }\r\n\r\n  }, [candyMachine, publicKey, props.connection]);\r\n\r\n  const phase = getPhase(candyMachine);\r\n\r\n  return (\r\n    <Container>\r\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\r\n        <Paper\r\n          style={{\r\n            padding: \"34px 24px 90px 24px\",\r\n            display: \"flex\",\r\n\r\n            borderRadius: 6,\r\n          }}\r\n          className=\"minting-box\"\r\n        >\r\n          <Grid container justifyContent=\"space-between\" direction=\"column\">\r\n            <PhaseHeader\r\n              phase={phase}\r\n              candyMachine={candyMachine}\r\n              rpcUrl={rpcUrl}\r\n            />\r\n\r\n            <div>\r\n              {phase === Phase.Welcome && welcomeSettings.enableCustomHTML && (\r\n                <MintWelcomeCustomHTML />\r\n              )}\r\n              {phase === Phase.WhiteListMint &&\r\n                whitelistSettings.enableCustomHTML && (\r\n                  <MintWhitelistCustomHTML />\r\n                )}\r\n              {phase === Phase.PublicMint &&\r\n                publicSaleSettings.enableCustomHTML && (\r\n                  <MintPublicSaleCustomHTML />\r\n                )}\r\n\r\n              {(phase === Phase.PublicMint || Phase.WhiteListMint) && (\r\n                <>\r\n                  {phase === Phase.WhiteListMint && (\r\n                    <div className=\"card minting-info text-center\">\r\n                      {whiteListTokenBalance >= 0 ? (\r\n                        <h1>{whiteListTokenBalance}</h1>\r\n                      ) : (\r\n                        <div className=\"loading\"></div>\r\n                      )}\r\n\r\n                      <div>\r\n                        <p>Mints to Claim</p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <Grid\r\n                    container\r\n                    justifyContent=\"space-between\"\r\n                    color=\"textSecondary\"\r\n                  >\r\n                    <div className=\"test-stat\">\r\n                      {(phase === Phase.WhiteListMint ||\r\n                        phase === Phase.PublicMint) &&\r\n                        (itemsAvailable !== null && mintingTotal !== null ? (\r\n                          <p>{mintingTotal + \" / \" + itemsAvailable}</p>\r\n                        ) : (\r\n                          <p className=\"loading\"></p>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div className=\"text-end\">\r\n                      {(phase === Phase.Welcome && welcomeSettings.showPrice) ||\r\n                        phase === Phase.WhiteListMint ||\r\n                        phase === Phase.PublicMint ? (\r\n                        <>\r\n                          {price ? (\r\n                            <p>{price} Sol</p>\r\n                          ) : (\r\n                            <p className=\"loading\"></p>\r\n                          )}\r\n                        </>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n\r\n                      {/* {formatSol(yourSOLBalance || 0).toLocaleString()} SOL */}\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  {!wallet.connected ? (\r\n                    <ConnectButton>Connect{\"\"}</ConnectButton>\r\n                  ) : (\r\n                    <MintContainer>\r\n                      {candyMachine?.state.isActive &&\r\n                        candyMachine?.state.gatekeeper &&\r\n                        wallet.publicKey &&\r\n                        wallet.signTransaction ? (\r\n                        <GatewayProvider\r\n                          wallet={{\r\n                            publicKey:\r\n                              wallet.publicKey ||\r\n                              new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                            //@ts-ignore\r\n                            signTransaction: wallet.signTransaction,\r\n                          }}\r\n                          // // Replace with following when added\r\n                          // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                          gatekeeperNetwork={\r\n                            candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                          } // This is the ignite (captcha) network\r\n                          /// Don't need this for mainnet\r\n                          clusterUrl={rpcUrl}\r\n                          options={{ autoShowModal: false }}\r\n                        >\r\n                          <MintButton\r\n                            candyMachine={candyMachine}\r\n                            isMinting={isMinting}\r\n                            onMint={onMint}\r\n                          />\r\n                        </GatewayProvider>\r\n                      ) : (\r\n                        <MintButton\r\n                          candyMachine={candyMachine}\r\n                          isMinting={isMinting}\r\n                          onMint={onMint}\r\n                        />\r\n                      )}\r\n                    </MintContainer>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}