{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { validate } from \"uuid\";\nimport { LIB_VERSION } from \"../version\";\nimport { clientNames, baseUrls, customHeaders } from \"../types\";\nexport var OnboardingRequestStatusResponse;\n\n(function (OnboardingRequestStatusResponse) {\n  OnboardingRequestStatusResponse[\"WAITING_SUBMISSION\"] = \"waiting-submission\";\n  OnboardingRequestStatusResponse[\"PENDING\"] = \"pending\";\n  OnboardingRequestStatusResponse[\"REJECTED\"] = \"rejected\";\n  OnboardingRequestStatusResponse[\"ACCEPTED\"] = \"accepted\";\n  OnboardingRequestStatusResponse[\"INVALID\"] = \"invalid\";\n})(OnboardingRequestStatusResponse || (OnboardingRequestStatusResponse = {}));\n\nconst validateClientId = clientId => {\n  try {\n    const isValid = validate(clientId);\n    return !!isValid;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n\nexport default function useCrossMintStatus(_ref) {\n  let {\n    clientId,\n    development\n  } = _ref;\n  const [status, setStatus] = useState(OnboardingRequestStatusResponse.WAITING_SUBMISSION);\n\n  async function fetchClientIntegration() {\n    if (!clientId || clientId === \"\" || clientId === \"<YOUR_CLIENT_ID>\") {\n      console.error(\"You must enter your own Crossmint client ID in <CrossmintPayButton clientId=XXX>\");\n      return;\n    }\n\n    if (!validateClientId(clientId)) {\n      console.error(\"The clientId passed to is invalid. Make sure to pass the clientId obtained from the crossmint team, with format XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX\");\n      return;\n    }\n\n    const baseUrl = development ? baseUrls.dev : baseUrls.prod;\n    const res = await fetch(`${baseUrl}/api/crossmint/onboardingRequests/${clientId}/status`, {\n      headers: {\n        [customHeaders.clientVersion]: LIB_VERSION,\n        [customHeaders.clientName]: clientNames.reactUi\n      }\n    });\n\n    if (res.status === 200) {\n      const resData = await res.json();\n      setStatus(resData.status);\n    } else {\n      if (status !== OnboardingRequestStatusResponse.INVALID) {\n        setStatus(OnboardingRequestStatusResponse.INVALID);\n      }\n    }\n  }\n\n  useEffect(() => {\n    fetchClientIntegration();\n    const interval = setInterval(() => {\n      fetchClientIntegration();\n    }, 60 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return status;\n}","map":{"version":3,"sources":["../../../src/hooks/useCrossmintStatus.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,EAAmB,SAAnB,QAAoC,OAApC;AACA,SAAS,QAAT,QAAyB,MAAzB;AACA,SAAS,WAAT,QAA4B,YAA5B;AACA,SAAS,WAAT,EAAsB,QAAtB,EAAgC,aAAhC,QAAqD,UAArD;AAEA,OAAA,IAAY,+BAAZ;;AAAA,CAAA,UAAY,+BAAZ,EAA2C;AACvC,EAAA,+BAAA,CAAA,oBAAA,CAAA,GAAA,oBAAA;AACA,EAAA,+BAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,+BAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,+BAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,+BAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACH,CAND,EAAY,+BAA+B,KAA/B,+BAA+B,GAAA,EAAA,CAA3C;;AAoBA,MAAM,gBAAgB,GAAI,QAAD,IAA8B;AACnD,MAAI;AACA,UAAM,OAAO,GAAG,QAAQ,CAAC,QAAD,CAAxB;AACA,WAAO,CAAC,CAAC,OAAT;AACH,GAHD,CAGE,OAAO,CAAP,EAAU;AACR,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACA,WAAO,KAAP;AACH;AACJ,CARD;;AAUA,eAAc,SAAU,kBAAV,OAA8D;AAAA,MAAjC;AAAE,IAAA,QAAF;AAAY,IAAA;AAAZ,GAAiC;AACxE,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAChC,+BAA+B,CAAC,kBADA,CAApC;;AAIA,iBAAe,sBAAf,GAAqC;AACjC,QAAI,CAAC,QAAD,IAAa,QAAQ,KAAK,EAA1B,IAAgC,QAAQ,KAAK,kBAAjD,EAAqE;AACjE,MAAA,OAAO,CAAC,KAAR,CAAc,kFAAd;AACA;AACH;;AAED,QAAI,CAAC,gBAAgB,CAAC,QAAD,CAArB,EAAiC;AAC7B,MAAA,OAAO,CAAC,KAAR,CACI,kJADJ;AAGA;AACH;;AAED,UAAM,OAAO,GAAG,WAAW,GAAG,QAAQ,CAAC,GAAZ,GAAkB,QAAQ,CAAC,IAAtD;AAEA,UAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,OAAO,qCAAqC,QAAQ,SAAxD,EAAmE;AACtF,MAAA,OAAO,EAAE;AACL,SAAC,aAAa,CAAC,aAAf,GAA+B,WAD1B;AAEL,SAAC,aAAa,CAAC,UAAf,GAA4B,WAAW,CAAC;AAFnC;AAD6E,KAAnE,CAAvB;;AAOA,QAAI,GAAG,CAAC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,YAAM,OAAO,GAAkE,MAAM,GAAG,CAAC,IAAJ,EAArF;AAEA,MAAA,SAAS,CAAC,OAAO,CAAC,MAAT,CAAT;AACH,KAJD,MAIO;AACH,UAAI,MAAM,KAAK,+BAA+B,CAAC,OAA/C,EAAwD;AACpD,QAAA,SAAS,CAAC,+BAA+B,CAAC,OAAjC,CAAT;AACH;AACJ;AACJ;;AAED,EAAA,SAAS,CAAC,MAAK;AACX,IAAA,sBAAsB;AAEtB,UAAM,QAAQ,GAAG,WAAW,CAAC,MAAK;AAC9B,MAAA,sBAAsB;AACzB,KAF2B,EAEzB,KAAK,IAFoB,CAA5B;AAIA,WAAO,MAAM,aAAa,CAAC,QAAD,CAA1B;AACH,GARQ,EAQN,EARM,CAAT;AAUA,SAAO,MAAP;AACH","sourceRoot":"","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { validate } from \"uuid\";\nimport { LIB_VERSION } from \"../version\";\nimport { clientNames, baseUrls, customHeaders } from \"../types\";\nexport var OnboardingRequestStatusResponse;\n(function (OnboardingRequestStatusResponse) {\n    OnboardingRequestStatusResponse[\"WAITING_SUBMISSION\"] = \"waiting-submission\";\n    OnboardingRequestStatusResponse[\"PENDING\"] = \"pending\";\n    OnboardingRequestStatusResponse[\"REJECTED\"] = \"rejected\";\n    OnboardingRequestStatusResponse[\"ACCEPTED\"] = \"accepted\";\n    OnboardingRequestStatusResponse[\"INVALID\"] = \"invalid\";\n})(OnboardingRequestStatusResponse || (OnboardingRequestStatusResponse = {}));\nconst validateClientId = (clientId) => {\n    try {\n        const isValid = validate(clientId);\n        return !!isValid;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\nexport default function useCrossMintStatus({ clientId, development }) {\n    const [status, setStatus] = useState(OnboardingRequestStatusResponse.WAITING_SUBMISSION);\n    async function fetchClientIntegration() {\n        if (!clientId || clientId === \"\" || clientId === \"<YOUR_CLIENT_ID>\") {\n            console.error(\"You must enter your own Crossmint client ID in <CrossmintPayButton clientId=XXX>\");\n            return;\n        }\n        if (!validateClientId(clientId)) {\n            console.error(\"The clientId passed to is invalid. Make sure to pass the clientId obtained from the crossmint team, with format XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX\");\n            return;\n        }\n        const baseUrl = development ? baseUrls.dev : baseUrls.prod;\n        const res = await fetch(`${baseUrl}/api/crossmint/onboardingRequests/${clientId}/status`, {\n            headers: {\n                [customHeaders.clientVersion]: LIB_VERSION,\n                [customHeaders.clientName]: clientNames.reactUi,\n            },\n        });\n        if (res.status === 200) {\n            const resData = await res.json();\n            setStatus(resData.status);\n        }\n        else {\n            if (status !== OnboardingRequestStatusResponse.INVALID) {\n                setStatus(OnboardingRequestStatusResponse.INVALID);\n            }\n        }\n    }\n    useEffect(() => {\n        fetchClientIntegration();\n        const interval = setInterval(() => {\n            fetchClientIntegration();\n        }, 60 * 1000);\n        return () => clearInterval(interval);\n    }, []);\n    return status;\n}\n//# sourceMappingURL=useCrossmintStatus.js.map"]},"metadata":{},"sourceType":"module"}