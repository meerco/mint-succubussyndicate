{"ast":null,"code":"import { useState } from \"react\";\nimport { LIB_VERSION } from \"../version\";\nimport { baseUrls, clientNames } from \"../types\";\n\nfunction createPopupString() {\n  return `height=750,width=400,left=${window.innerWidth / 2 - 200},top=${window.innerHeight / 2 - 375},resizable=yes,scrollbars=yes,toolbar=yes,menubar=true,location=no,directories=no, status=yes`;\n}\n\nconst overlayId = \"__crossmint-overlay__\";\n\nconst addLoadingOverlay = () => {\n  const overlayEl = document.createElement(\"div\");\n  overlayEl.setAttribute(\"id\", overlayId);\n  const overlayStyles = {\n    width: \"100vw\",\n    height: \"100vh\",\n    \"background-color\": \"rgba(0, 0, 0, 0.5)\",\n    position: \"fixed\",\n    \"z-index\": \"99999999\",\n    top: \"0\",\n    left: \"0\"\n  };\n  Object.assign(overlayEl.style, overlayStyles);\n  document.body.appendChild(overlayEl);\n};\n\nconst removeLoadingOverlay = () => {\n  const overlayEl = document.getElementById(overlayId);\n  if (overlayEl) overlayEl.remove();\n};\n\nexport default function useCrossMintModal(_ref) {\n  let {\n    development,\n    clientId,\n    showOverlay\n  } = _ref;\n  const [connecting, setConnecting] = useState(false);\n\n  const createPopup = (mintConfig, collectionTitle, collectionDescription, collectionPhoto, mintTo, emailTo, listingId) => {\n    const urlOrigin = development ? baseUrls.dev : baseUrls.prod;\n\n    const getMintQueryParams = () => {\n      const mintQueryParams = {\n        clientId: clientId,\n        closeOnSuccess: \"false\",\n        clientName: clientNames.reactUi,\n        clientVersion: LIB_VERSION,\n        mintConfig: JSON.stringify(mintConfig)\n      };\n      if (collectionTitle) mintQueryParams.collectionTitle = collectionTitle;\n      if (collectionDescription) mintQueryParams.collectionDescription = collectionDescription;\n      if (collectionPhoto) mintQueryParams.collectionPhoto = collectionPhoto;\n      if (mintTo) mintQueryParams.mintTo = mintTo;\n      if (emailTo) mintQueryParams.emailTo = emailTo;\n      if (listingId) mintQueryParams.listingId = listingId;\n      return new URLSearchParams(mintQueryParams).toString();\n    };\n\n    const callbackUrl = encodeURIComponent(`${urlOrigin}/checkout/mint?${getMintQueryParams()}`);\n    const url = `${urlOrigin}/signin?callbackUrl=${callbackUrl}`;\n    const pop = window.open(url, \"popUpWindow\", createPopupString());\n\n    if (pop) {\n      registerListeners(pop);\n\n      if (showOverlay) {\n        addLoadingOverlay();\n      }\n    } else {\n      setConnecting(false);\n      console.error(\"Failed to open popup window\");\n    }\n  };\n\n  const connect = (mintConfig, collectionTitle, collectionDescription, collectionPhoto, mintTo, emailTo, listingId) => {\n    if (connecting) return;\n    setConnecting(true);\n    createPopup(mintConfig, collectionTitle, collectionDescription, collectionPhoto, mintTo, emailTo, listingId);\n  };\n\n  function registerListeners(pop) {\n    const timer = setInterval(function () {\n      if (pop.closed) {\n        clearInterval(timer);\n        setConnecting(false);\n\n        if (showOverlay) {\n          removeLoadingOverlay();\n        }\n      }\n    }, 500);\n  }\n\n  return {\n    connecting,\n    connect\n  };\n}","map":{"version":3,"sources":["../../../src/hooks/useCrossmintModal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useState } from \"react\";\nimport { LIB_VERSION } from \"../version\";\nimport { baseUrls, clientNames } from \"../types\";\nfunction createPopupString() {\n    return `height=750,width=400,left=${window.innerWidth / 2 - 200},top=${window.innerHeight / 2 - 375},resizable=yes,scrollbars=yes,toolbar=yes,menubar=true,location=no,directories=no, status=yes`;\n}\nconst overlayId = \"__crossmint-overlay__\";\nconst addLoadingOverlay = () => {\n    const overlayEl = document.createElement(\"div\");\n    overlayEl.setAttribute(\"id\", overlayId);\n    const overlayStyles = {\n        width: \"100vw\",\n        height: \"100vh\",\n        \"background-color\": \"rgba(0, 0, 0, 0.5)\",\n        position: \"fixed\",\n        \"z-index\": \"99999999\",\n        top: \"0\",\n        left: \"0\",\n    };\n    Object.assign(overlayEl.style, overlayStyles);\n    document.body.appendChild(overlayEl);\n};\nconst removeLoadingOverlay = () => {\n    const overlayEl = document.getElementById(overlayId);\n    if (overlayEl)\n        overlayEl.remove();\n};\nexport default function useCrossMintModal({ development, clientId, showOverlay }) {\n    const [connecting, setConnecting] = useState(false);\n    const createPopup = (mintConfig, collectionTitle, collectionDescription, collectionPhoto, mintTo, emailTo, listingId) => {\n        const urlOrigin = development ? baseUrls.dev : baseUrls.prod;\n        const getMintQueryParams = () => {\n            const mintQueryParams = {\n                clientId: clientId,\n                closeOnSuccess: \"false\",\n                clientName: clientNames.reactUi,\n                clientVersion: LIB_VERSION,\n                mintConfig: JSON.stringify(mintConfig),\n            };\n            if (collectionTitle)\n                mintQueryParams.collectionTitle = collectionTitle;\n            if (collectionDescription)\n                mintQueryParams.collectionDescription = collectionDescription;\n            if (collectionPhoto)\n                mintQueryParams.collectionPhoto = collectionPhoto;\n            if (mintTo)\n                mintQueryParams.mintTo = mintTo;\n            if (emailTo)\n                mintQueryParams.emailTo = emailTo;\n            if (listingId)\n                mintQueryParams.listingId = listingId;\n            return new URLSearchParams(mintQueryParams).toString();\n        };\n        const callbackUrl = encodeURIComponent(`${urlOrigin}/checkout/mint?${getMintQueryParams()}`);\n        const url = `${urlOrigin}/signin?callbackUrl=${callbackUrl}`;\n        const pop = window.open(url, \"popUpWindow\", createPopupString());\n        if (pop) {\n            registerListeners(pop);\n            if (showOverlay) {\n                addLoadingOverlay();\n            }\n        }\n        else {\n            setConnecting(false);\n            console.error(\"Failed to open popup window\");\n        }\n    };\n    const connect = (mintConfig, collectionTitle, collectionDescription, collectionPhoto, mintTo, emailTo, listingId) => {\n        if (connecting)\n            return;\n        setConnecting(true);\n        createPopup(mintConfig, collectionTitle, collectionDescription, collectionPhoto, mintTo, emailTo, listingId);\n    };\n    function registerListeners(pop) {\n        const timer = setInterval(function () {\n            if (pop.closed) {\n                clearInterval(timer);\n                setConnecting(false);\n                if (showOverlay) {\n                    removeLoadingOverlay();\n                }\n            }\n        }, 500);\n    }\n    return { connecting, connect };\n}\n//# sourceMappingURL=useCrossmintModal.js.map"]},"metadata":{},"sourceType":"module"}