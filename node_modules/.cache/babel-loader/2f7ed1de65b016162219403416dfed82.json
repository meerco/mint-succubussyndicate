{"ast":null,"code":"import React, { useMemo, useCallback } from \"react\";\nimport useCrossmintStatus, { OnboardingRequestStatusResponse } from \"./hooks/useCrossmintStatus\";\nimport { useStyles, formatProps } from \"./styles\";\nimport { baseUrls } from \"./types\";\nimport { isClientSide } from \"./utils\";\nexport const CrossmintStatusButton = _ref => {\n  let {\n    className,\n    disabled,\n    onClick,\n    style,\n    tabIndex,\n    theme = \"dark\",\n    clientId,\n    auctionId,\n    development = false,\n    platformId,\n    mintConfig,\n    ...props\n  } = _ref;\n  const status = useCrossmintStatus({\n    clientId,\n    development\n  });\n\n  const formatOnboardingQueryParams = () => {\n    const onboardingQueryParams = {\n      clientId: clientId\n    };\n    if (platformId) onboardingQueryParams.platformId = platformId;\n    if (auctionId) onboardingQueryParams.auctionId = auctionId;\n    if (mintConfig) onboardingQueryParams.mintConfig = JSON.stringify(mintConfig);\n    return new URLSearchParams(onboardingQueryParams).toString();\n  };\n\n  const goToOnboarding = () => {\n    const baseUrl = development ? baseUrls.dev : baseUrls.prod;\n    window.open(`${baseUrl}/developers/onboarding?${formatOnboardingQueryParams()}`, \"_blank\");\n  };\n\n  const handleClick = useCallback(event => {\n    if (onClick) onClick(event);\n\n    if (status === OnboardingRequestStatusResponse.WAITING_SUBMISSION) {\n      goToOnboarding();\n      return;\n    }\n  }, [status]);\n  const classes = useStyles(formatProps(theme));\n  const content = useMemo(() => {\n    switch (status) {\n      case OnboardingRequestStatusResponse.INVALID:\n        return React.createElement(\"p\", {\n          className: classes.crossmintParagraph\n        }, \"Invalid clientId\");\n\n      case OnboardingRequestStatusResponse.WAITING_SUBMISSION:\n        return React.createElement(\"p\", {\n          className: classes.crossmintParagraph\n        }, \"Click here to setup CrossMint\");\n\n      case OnboardingRequestStatusResponse.PENDING:\n        return React.createElement(\"p\", {\n          className: classes.crossmintParagraph\n        }, \"Your application is under review\");\n\n      case OnboardingRequestStatusResponse.ACCEPTED:\n        return React.createElement(\"p\", {\n          className: classes.crossmintParagraph\n        }, \"You're good to go!\");\n\n      case OnboardingRequestStatusResponse.REJECTED:\n        return React.createElement(\"p\", {\n          className: classes.crossmintParagraph\n        }, \"Your application was rejected\");\n    }\n  }, [status]);\n  return React.createElement(React.Fragment, null, isClientSide && React.createElement(\"button\", {\n    className: `${classes.crossmintButton} ${className || \"\"}`,\n    disabled: status !== OnboardingRequestStatusResponse.WAITING_SUBMISSION,\n    onClick: handleClick,\n    style: { ...style\n    },\n    tabIndex: tabIndex,\n    ...props\n  }, React.createElement(\"img\", {\n    className: classes.crossmintImg,\n    src: `${baseUrls.prod}/assets/crossmint/logo.png`,\n    alt: \"Crossmint logo\"\n  }), content));\n};","map":{"version":3,"sources":["../../src/CrossmintStatusButton.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useMemo, useCallback } from \"react\";\nimport useCrossmintStatus, { OnboardingRequestStatusResponse } from \"./hooks/useCrossmintStatus\";\nimport { useStyles, formatProps } from \"./styles\";\nimport { baseUrls } from \"./types\";\nimport { isClientSide } from \"./utils\";\nexport const CrossmintStatusButton = ({ className, disabled, onClick, style, tabIndex, theme = \"dark\", clientId, auctionId, development = false, platformId, mintConfig, ...props }) => {\n    const status = useCrossmintStatus({ clientId, development });\n    const formatOnboardingQueryParams = () => {\n        const onboardingQueryParams = {\n            clientId: clientId,\n        };\n        if (platformId)\n            onboardingQueryParams.platformId = platformId;\n        if (auctionId)\n            onboardingQueryParams.auctionId = auctionId;\n        if (mintConfig)\n            onboardingQueryParams.mintConfig = JSON.stringify(mintConfig);\n        return new URLSearchParams(onboardingQueryParams).toString();\n    };\n    const goToOnboarding = () => {\n        const baseUrl = development ? baseUrls.dev : baseUrls.prod;\n        window.open(`${baseUrl}/developers/onboarding?${formatOnboardingQueryParams()}`, \"_blank\");\n    };\n    const handleClick = useCallback((event) => {\n        if (onClick)\n            onClick(event);\n        if (status === OnboardingRequestStatusResponse.WAITING_SUBMISSION) {\n            goToOnboarding();\n            return;\n        }\n    }, [status]);\n    const classes = useStyles(formatProps(theme));\n    const content = useMemo(() => {\n        switch (status) {\n            case OnboardingRequestStatusResponse.INVALID:\n                return React.createElement(\"p\", { className: classes.crossmintParagraph }, \"Invalid clientId\");\n            case OnboardingRequestStatusResponse.WAITING_SUBMISSION:\n                return React.createElement(\"p\", { className: classes.crossmintParagraph }, \"Click here to setup CrossMint\");\n            case OnboardingRequestStatusResponse.PENDING:\n                return React.createElement(\"p\", { className: classes.crossmintParagraph }, \"Your application is under review\");\n            case OnboardingRequestStatusResponse.ACCEPTED:\n                return React.createElement(\"p\", { className: classes.crossmintParagraph }, \"You're good to go!\");\n            case OnboardingRequestStatusResponse.REJECTED:\n                return React.createElement(\"p\", { className: classes.crossmintParagraph }, \"Your application was rejected\");\n        }\n    }, [status]);\n    return (React.createElement(React.Fragment, null, isClientSide && (React.createElement(\"button\", { className: `${classes.crossmintButton} ${className || \"\"}`, disabled: status !== OnboardingRequestStatusResponse.WAITING_SUBMISSION, onClick: handleClick, style: { ...style }, tabIndex: tabIndex, ...props },\n        React.createElement(\"img\", { className: classes.crossmintImg, src: `${baseUrls.prod}/assets/crossmint/logo.png`, alt: \"Crossmint logo\" }),\n        content))));\n};\n//# sourceMappingURL=CrossmintStatusButton.js.map"]},"metadata":{},"sourceType":"module"}