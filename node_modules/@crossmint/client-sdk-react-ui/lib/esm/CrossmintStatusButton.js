import React, { useMemo, useCallback } from "react";
import useCrossmintStatus, { OnboardingRequestStatusResponse } from "./hooks/useCrossmintStatus";
import { useStyles, formatProps } from "./styles";
import { baseUrls } from "./types";
import { isClientSide } from "./utils";
export const CrossmintStatusButton = ({ className, disabled, onClick, style, tabIndex, theme = "dark", clientId, auctionId, development = false, platformId, mintConfig, ...props }) => {
    const status = useCrossmintStatus({ clientId, development });
    const formatOnboardingQueryParams = () => {
        const onboardingQueryParams = {
            clientId: clientId,
        };
        if (platformId)
            onboardingQueryParams.platformId = platformId;
        if (auctionId)
            onboardingQueryParams.auctionId = auctionId;
        if (mintConfig)
            onboardingQueryParams.mintConfig = JSON.stringify(mintConfig);
        return new URLSearchParams(onboardingQueryParams).toString();
    };
    const goToOnboarding = () => {
        const baseUrl = development ? baseUrls.dev : baseUrls.prod;
        window.open(`${baseUrl}/developers/onboarding?${formatOnboardingQueryParams()}`, "_blank");
    };
    const handleClick = useCallback((event) => {
        if (onClick)
            onClick(event);
        if (status === OnboardingRequestStatusResponse.WAITING_SUBMISSION) {
            goToOnboarding();
            return;
        }
    }, [status]);
    const classes = useStyles(formatProps(theme));
    const content = useMemo(() => {
        switch (status) {
            case OnboardingRequestStatusResponse.INVALID:
                return React.createElement("p", { className: classes.crossmintParagraph }, "Invalid clientId");
            case OnboardingRequestStatusResponse.WAITING_SUBMISSION:
                return React.createElement("p", { className: classes.crossmintParagraph }, "Click here to setup CrossMint");
            case OnboardingRequestStatusResponse.PENDING:
                return React.createElement("p", { className: classes.crossmintParagraph }, "Your application is under review");
            case OnboardingRequestStatusResponse.ACCEPTED:
                return React.createElement("p", { className: classes.crossmintParagraph }, "You're good to go!");
            case OnboardingRequestStatusResponse.REJECTED:
                return React.createElement("p", { className: classes.crossmintParagraph }, "Your application was rejected");
        }
    }, [status]);
    return (React.createElement(React.Fragment, null, isClientSide && (React.createElement("button", { className: `${classes.crossmintButton} ${className || ""}`, disabled: status !== OnboardingRequestStatusResponse.WAITING_SUBMISSION, onClick: handleClick, style: { ...style }, tabIndex: tabIndex, ...props },
        React.createElement("img", { className: classes.crossmintImg, src: `${baseUrls.prod}/assets/crossmint/logo.png`, alt: "Crossmint logo" }),
        content))));
};
//# sourceMappingURL=CrossmintStatusButton.js.map