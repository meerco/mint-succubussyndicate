"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnboardingRequestStatusResponse = void 0;
const react_1 = require("react");
const uuid_1 = require("uuid");
const version_1 = require("../version");
const types_1 = require("../types");
var OnboardingRequestStatusResponse;
(function (OnboardingRequestStatusResponse) {
    OnboardingRequestStatusResponse["WAITING_SUBMISSION"] = "waiting-submission";
    OnboardingRequestStatusResponse["PENDING"] = "pending";
    OnboardingRequestStatusResponse["REJECTED"] = "rejected";
    OnboardingRequestStatusResponse["ACCEPTED"] = "accepted";
    OnboardingRequestStatusResponse["INVALID"] = "invalid";
})(OnboardingRequestStatusResponse = exports.OnboardingRequestStatusResponse || (exports.OnboardingRequestStatusResponse = {}));
const validateClientId = (clientId) => {
    try {
        const isValid = (0, uuid_1.validate)(clientId);
        return !!isValid;
    }
    catch (e) {
        console.error(e);
        return false;
    }
};
function useCrossMintStatus({ clientId, development }) {
    const [status, setStatus] = (0, react_1.useState)(OnboardingRequestStatusResponse.WAITING_SUBMISSION);
    function fetchClientIntegration() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!clientId || clientId === "" || clientId === "<YOUR_CLIENT_ID>") {
                console.error("You must enter your own Crossmint client ID in <CrossmintPayButton clientId=XXX>");
                return;
            }
            if (!validateClientId(clientId)) {
                console.error("The clientId passed to is invalid. Make sure to pass the clientId obtained from the crossmint team, with format XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX");
                return;
            }
            const baseUrl = development ? types_1.baseUrls.dev : types_1.baseUrls.prod;
            const res = yield fetch(`${baseUrl}/api/crossmint/onboardingRequests/${clientId}/status`, {
                headers: {
                    [types_1.customHeaders.clientVersion]: version_1.LIB_VERSION,
                    [types_1.customHeaders.clientName]: types_1.clientNames.reactUi,
                },
            });
            if (res.status === 200) {
                const resData = yield res.json();
                setStatus(resData.status);
            }
            else {
                if (status !== OnboardingRequestStatusResponse.INVALID) {
                    setStatus(OnboardingRequestStatusResponse.INVALID);
                }
            }
        });
    }
    (0, react_1.useEffect)(() => {
        fetchClientIntegration();
        const interval = setInterval(() => {
            fetchClientIntegration();
        }, 60 * 1000);
        return () => clearInterval(interval);
    }, []);
    return status;
}
exports.default = useCrossMintStatus;
//# sourceMappingURL=useCrossmintStatus.js.map